
import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Share2, Twitter, Linkedin, Globe, Calendar, Zap } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface SocialPost {
  id: string;
  content: string;
  platforms: string[];
  scheduledTime: string;
  status: 'draft' | 'scheduled' | 'published';
  autoGenerated: boolean;
}

const SocialMediaManager = ({ widgetId }: { widgetId?: string }) => {
  const [posts, setPosts] = useState<SocialPost[]>([]);
  const [newPost, setNewPost] = useState('');
  const [selectedPlatforms, setSelectedPlatforms] = useState<string[]>([]);
  const [autoPosting, setAutoPosting] = useState(false);
  const { toast } = useToast();

  const platforms = [
    { id: 'twitter', name: 'Twitter/X', icon: Twitter, color: 'text-blue-400' },
    { id: 'linkedin', name: 'LinkedIn', icon: Linkedin, color: 'text-blue-600' },
    { id: 'medium', name: 'Medium', icon: Globe, color: 'text-gray-400' }
  ];

  useEffect(() => {
    loadSocialData();
  }, []);

  const loadSocialData = () => {
    const savedPosts = localStorage.getItem('social_media_posts');
    const savedAutoPosting = localStorage.getItem('auto_posting_enabled');
    
    if (savedPosts) setPosts(JSON.parse(savedPosts));
    if (savedAutoPosting) setAutoPosting(JSON.parse(savedAutoPosting));
  };

  const saveSocialData = (newPosts: SocialPost[]) => {
    setPosts(newPosts);
    localStorage.setItem('social_media_posts', JSON.stringify(newPosts));
  };

  const schedulePost = () => {
    if (!newPost.trim() || selectedPlatforms.length === 0) {
      toast({
        title: "Missing Information",
        description: "Please add content and select platforms",
        variant: "destructive",
      });
      return;
    }

    const post: SocialPost = {
      id: Date.now().toString(),
      content: newPost,
      platforms: selectedPlatforms,
      scheduledTime: new Date(Date.now() + 60 * 60 * 1000).toISOString(), // 1 hour from now
      status: 'scheduled',
      autoGenerated: false
    };

    saveSocialData([...posts, post]);
    setNewPost('');
    setSelectedPlatforms([]);
    
    toast({
      title: "Post Scheduled",
      description: `Scheduled for ${selectedPlatforms.length} platform(s)`,
    });
  };

  const generateAutoPost = async () => {
    const techTopics = [
      "The future of AI in Kenya's tech ecosystem",
      "Mobile money innovation driving financial inclusion",
      "Kenya's growing startup ecosystem",
      "Digital transformation in East Africa",
      "Tech talent development in Kenya"
    ];
    
    const randomTopic = techTopics[Math.floor(Math.random() * techTopics.length)];
    
    const autoPost: SocialPost = {
      id: Date.now().toString(),
      content: `ðŸš€ ${randomTopic}. What are your thoughts on this trend? #KenyaTech #Innovation #DigitalTransformation`,
      platforms: ['twitter', 'linkedin'],
      scheduledTime: new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString(),
      status: 'scheduled',
      autoGenerated: true
    };

    saveSocialData([...posts, autoPost]);
    
    toast({
      title: "Auto Post Generated",
      description: "AI created a social media post about tech trends",
    });
  };

  const togglePlatform = (platformId: string) => {
    setSelectedPlatforms(prev => 
      prev.includes(platformId)
        ? prev.filter(id => id !== platformId)
        : [...prev, platformId]
    );
  };

  const getRecentPosts = () => posts.slice(-3);

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h3 className="text-white font-medium flex items-center">
          <Share2 className="w-4 h-4 mr-2" />
          Social Media
        </h3>
        <Button
          onClick={generateAutoPost}
          size="sm"
          variant="ghost"
          className="text-purple-400 hover:text-purple-300"
        >
          <Zap className="w-3 h-3" />
        </Button>
      </div>

      <div className="space-y-3">
        <Textarea
          placeholder="What's happening in Kenya tech today?"
          value={newPost}
          onChange={(e) => setNewPost(e.target.value)}
          className="bg-[#21262d] border-[#30363d] text-white text-sm min-h-16"
        />
        
        <div className="flex gap-1">
          {platforms.map(platform => {
            const Icon = platform.icon;
            return (
              <Button
                key={platform.id}
                onClick={() => togglePlatform(platform.id)}
                size="sm"
                variant={selectedPlatforms.includes(platform.id) ? "default" : "outline"}
                className={`${selectedPlatforms.includes(platform.id) ? platform.color : ''}`}
              >
                <Icon className="w-3 h-3" />
              </Button>
            );
          })}
        </div>
        
        <Button
          onClick={schedulePost}
          size="sm"
          className="w-full bg-blue-600 hover:bg-blue-700"
        >
          <Calendar className="w-3 h-3 mr-2" />
          Schedule Post
        </Button>
      </div>

      <div className="space-y-2">
        <h4 className="text-[#7d8590] text-xs">Recent Posts</h4>
        {getRecentPosts().length === 0 ? (
          <p className="text-[#7d8590] text-sm">No posts yet</p>
        ) : (
          getRecentPosts().map(post => (
            <div key={post.id} className="p-2 bg-[#21262d] rounded">
              <p className="text-white text-xs line-clamp-2">{post.content}</p>
              <div className="flex items-center justify-between mt-1">
                <div className="flex gap-1">
                  {post.platforms.map(platformId => {
                    const platform = platforms.find(p => p.id === platformId);
                    if (!platform) return null;
                    const Icon = platform.icon;
                    return <Icon key={platformId} className={`w-3 h-3 ${platform.color}`} />;
                  })}
                </div>
                <div className="flex gap-1">
                  <span className={`text-xs px-1 py-0.5 rounded ${
                    post.status === 'scheduled' 
                      ? 'bg-blue-500/20 text-blue-400' 
                      : 'bg-green-500/20 text-green-400'
                  }`}>
                    {post.status}
                  </span>
                  {post.autoGenerated && (
                    <span className="text-xs bg-purple-500/20 text-purple-400 px-1 py-0.5 rounded">
                      AI
                    </span>
                  )}
                </div>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default SocialMediaManager;
