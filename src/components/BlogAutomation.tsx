
import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { FileText, Zap, Calendar, Clock, Settings } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface BlogPost {
  id: string;
  title: string;
  content: string;
  scheduledTime: string;
  status: 'draft' | 'scheduled' | 'published';
  autoGenerated: boolean;
}

const BlogAutomation = ({ widgetId }: { widgetId?: string }) => {
  const [posts, setPosts] = useState<BlogPost[]>([]);
  const [autoSettings, setAutoSettings] = useState({
    enabled: false,
    frequency: 'weekly',
    topics: '',
    aiPrompt: 'Write a professional blog post about Kenya tech industry trends'
  });
  const [isScheduling, setIsScheduling] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    loadBlogData();
  }, []);

  const loadBlogData = () => {
    const savedPosts = localStorage.getItem('automated_blog_posts');
    const savedSettings = localStorage.getItem('blog_automation_settings');
    
    if (savedPosts) setPosts(JSON.parse(savedPosts));
    if (savedSettings) setAutoSettings(JSON.parse(savedSettings));
  };

  const saveBlogData = (newPosts: BlogPost[], newSettings?: typeof autoSettings) => {
    setPosts(newPosts);
    localStorage.setItem('automated_blog_posts', JSON.stringify(newPosts));
    
    if (newSettings) {
      setAutoSettings(newSettings);
      localStorage.setItem('blog_automation_settings', JSON.stringify(newSettings));
    }
  };

  const generateBlogPost = async () => {
    try {
      // Simulate AI blog generation
      const topics = ['AI in Kenya', 'Tech Startups', 'Digital Transformation', 'Mobile Money Innovation'];
      const randomTopic = topics[Math.floor(Math.random() * topics.length)];
      
      const newPost: BlogPost = {
        id: Date.now().toString(),
        title: `The Future of ${randomTopic} in East Africa`,
        content: `This is an AI-generated blog post about ${randomTopic}. 

Introduction:
The technology landscape in Kenya continues to evolve rapidly, with ${randomTopic.toLowerCase()} playing a crucial role in shaping the future.

Key Points:
• Innovation is driving growth across sectors
• Local solutions are addressing regional challenges
• The ecosystem is becoming more mature and sustainable

Conclusion:
As we look ahead, ${randomTopic.toLowerCase()} will continue to be a cornerstone of Kenya's digital transformation journey.`,
        scheduledTime: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
        status: 'draft',
        autoGenerated: true
      };

      saveBlogData([...posts, newPost]);
      
      toast({
        title: "Blog Post Generated",
        description: `AI generated a post about ${randomTopic}`,
      });
    } catch (error) {
      toast({
        title: "Generation Failed",
        description: "Failed to generate blog post",
        variant: "destructive",
      });
    }
  };

  const schedulePost = (postId: string, scheduledTime: string) => {
    const updatedPosts = posts.map(post => 
      post.id === postId 
        ? { ...post, scheduledTime, status: 'scheduled' as const }
        : post
    );
    saveBlogData(updatedPosts);
    
    toast({
      title: "Post Scheduled",
      description: "Blog post has been scheduled for publishing",
    });
  };

  const toggleAutomation = () => {
    const newSettings = { ...autoSettings, enabled: !autoSettings.enabled };
    saveBlogData(posts, newSettings);
    
    toast({
      title: autoSettings.enabled ? "Automation Disabled" : "Automation Enabled",
      description: autoSettings.enabled 
        ? "Blog automation has been turned off" 
        : "Blog automation is now active",
    });
  };

  const getPendingPosts = () => posts.filter(p => p.status === 'draft' || p.status === 'scheduled');

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h3 className="text-white font-medium flex items-center">
          <FileText className="w-4 h-4 mr-2" />
          Blog Automation
        </h3>
        <div className="flex gap-1">
          <Button
            onClick={toggleAutomation}
            size="sm"
            variant={autoSettings.enabled ? "default" : "outline"}
            className={autoSettings.enabled ? "bg-green-600 hover:bg-green-700" : ""}
          >
            <Zap className="w-3 h-3" />
          </Button>
          <Button
            onClick={generateBlogPost}
            size="sm"
            variant="ghost"
            className="text-blue-400 hover:text-blue-300"
          >
            <FileText className="w-3 h-3" />
          </Button>
        </div>
      </div>

      <div className="space-y-2 max-h-48 overflow-y-auto">
        {getPendingPosts().length === 0 ? (
          <div className="text-center py-4">
            <p className="text-[#7d8590] text-sm mb-2">No pending blog posts</p>
            <Button
              onClick={generateBlogPost}
              size="sm"
              className="bg-blue-600 hover:bg-blue-700"
            >
              Generate First Post
            </Button>
          </div>
        ) : (
          getPendingPosts().slice(0, 3).map(post => (
            <div key={post.id} className="p-2 bg-[#21262d] rounde">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <p className="text-white text-sm font-medium truncate">{post.title}</p>
                  <div className="flex items-center space-x-2 mt-1">
                    <span className={`text-xs px-2 py-1 rounded ${
                      post.status === 'scheduled' 
                        ? 'bg-blue-500/20 text-blue-400' 
                        : 'bg-yellow-500/20 text-yellow-400'
                    }`}>
                      {post.status}
                    </span>
                    {post.autoGenerated && (
                      <span className="text-xs bg-purple-500/20 text-purple-400 px-2 py-1 rounded">
                        AI
                      </span>
                    )}
                  </div>
                  {post.status === 'scheduled' && (
                    <p className="text-[#7d8590] text-xs mt-1 flex items-center">
                      <Calendar className="w-3 h-3 mr-1" />
                      {new Date(post.scheduledTime).toLocaleDateString()}
                    </p>
                  )}
                </div>
              </div>
            </div>
          ))
        )}
      </div>

      {autoSettings.enabled && (
        <div className="p-2 bg-green-500/10 border border-green-500/30 rounded">
          <p className="text-green-400 text-xs font-medium">Auto-generation Active</p>
          <p className="text-[#7d8590] text-xs">
            Generating {autoSettings.frequency} posts about Kenya tech
          </p>
        </div>
      )}
    </div>
  );
};

export default BlogAutomation;
